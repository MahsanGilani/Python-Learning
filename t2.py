# x = 2
# x += 1.0
# print(type(x))
# print(type(2 - 2j))

# ********************************************************

# x = 0b1010111       # برای نوشتن اعداد در مبنای دو یا باینری از صفر بی استفاده میکنیم   
# y = 0o1245467       # برای نوشتن اعداد در مبنای هشت یا اکتا از صفر او استفاه میکنیم
# z = 0xABCDEF      # برای نوشتن اعداد در مبنای شانزده یا هگزادسیمال از صفر ایکس استفاده میکنیم

# print(x,type(x), sep=" - ")
# print(y,type(y), sep=" - ")
# print(z,type(z), sep=" - ")

# """
#     اعداد 10 به بالا در مبنای 16
#     A = 10, B = 11, C = 12, D = 13, E = 14, F = 15
# """

# ********************************************************

# x = 124
# y = 123456
# z = 98501445

# print(bin(x))       # چاپ عدد در مبنای 2 یا باینتری
# print(oct(y))       # چاپ عدد در مبنای 8 یا اکتادسیمال
# print(hex(z))       # چاپ عدد در مبنای 16 یا هگزادسیمال

# ********************************************************

# print(0.1 + 0.2 == 0.3)         # چون وقتی اعداد اعشاری تبدیل به باینری میشن و بعد دوباره از باینری تبدیل به اعشار، کمی ارقامشون متفاوت میشه 
# # در واقع ذخیره ی اعداد اعشاری در کامپیوتر یذره متفاوت تر از اعداد صحیح صورت میگیره
# # برای اینکه بتونیم عبارت بالارو دقیقا برابر با 0.3 قرار بدیم میتونیم از دو روش زیر کمک بگیریم

# # روش اول و حرفه ای:
# from decimal import Decimal
# print(Decimal(0.1) + Decimal(0.2))      # نتیجه رو دوباره مثل قبل نشون میده
# print(Decimal('0.1') + Decimal('0.2'))      # اگه بصورت رشته ای بنویسیم درست نشونش میده

# # روش دوم و ابتدایی:
# print(((0.1 * 10)+(0.2 * 10))/10)

# # برای اعداد 0.3 و 0.6 نیز به همین صورته
# ********************************************************

# # برای نمایش شکل کسری اعداد از کتابخانه Fractions استفاده میکنیم
# import fractions

# print(fractions.Fraction(1.5))

# ********************************************************